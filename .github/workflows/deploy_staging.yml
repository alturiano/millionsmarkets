name: Deploy Staging

on:
  push:
    branches:
    - staging

jobs:
  deploy_staging:
    runs-on: ubuntu-latest
    environment: staging

    env:
      AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY : ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_BIN_API_KEY : ${{ secrets.TF_VAR_BIN_API_KEY }}
      TF_VAR_BIN_API_SECRET : ${{ secrets.TF_VAR_BIN_API_SECRET }}
      TF_VAR_STAGING : ${{ vars.TF_VAR_STAGING }}
      TF_VAR_FROM_LAMBDA : ${{ vars.TF_VAR_FROM_LAMBDA }}
      TF_VAR_COSMOBOT_DISCORD_CRYPTO_HOOK_URL : ${{ secrets.TF_VAR_COSMOBOT_DISCORD_CRYPTO_HOOK_URL }}
      TF_VAR_COSMOBOT_DISCORD_STOCK_HOOK_URL : ${{ secrets.TF_VAR_COSMOBOT_DISCORD_STOCK_HOOK_URL }}
      TF_VAR_COSMOBOT_DISCORD_ETF_HOOK_URL : ${{ secrets.TF_VAR_COSMOBOT_DISCORD_ETF_HOOK_URL }}
      TF_VAR_COSMOBOT_DISCORD_ROLE : ${{ vars.TF_VAR_COSMOBOT_DISCORD_ROLE }}
      TF_VAR_MONITORING_DISCORD_HOOK_URL : ${{ secrets.TF_VAR_MONITORING_DISCORD_HOOK_URL }}
      TF_VAR_MONITORING_DISCORD_ROLE : ${{ vars.TF_VAR_MONITORING_DISCORD_ROLE }}

    steps:
    - uses: actions/checkout@v3

    - name: Install zip
      run: sudo apt-get install -y zip

    - name: Setup Terraform CLI
      uses: hashicorp/setup-terraform@v2

    - name: Verify Terraform version
      run: terraform --version

    - name: Terraform init
      run: terraform init --upgrade --input=false

    - name: Terraform workspace
      run: terraform workspace select staging

    - name: Terraform validation
      run: terraform validate

    - name: Terraform ensure ec2 cosmobot instance is destroyed
      run: terraform destroy --target aws_instance.cosmobot_instance --auto-approve --input=false

    - name: Terraform apply
      run: |
            terraform apply --auto-approve --input=false
